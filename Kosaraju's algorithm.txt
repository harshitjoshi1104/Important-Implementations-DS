class Solution:
    
    #Function to find number of strongly connected components in the graph.
    def kosaraju(self, V, adj):
        
        def Helper(node):
            if visited[node]:
                return
            visited[node]=1
            for i in adj[node]:
                Helper(i)
            return
        # order=[0 for i in range(V)]
        order=self.TopoSort(adj)
        adj=self.TransposeGraph(adj)
        visited=[0 for i in range(V)]
        ans=0
        for i in range(V):
            if not visited[order[i]]:
                ans+=1
                Helper(order[i])
        return ans
    
    def TopoSort(self,adj):
        order=[]
        visited=[0 for i in range(len(adj))]
        def DFS(node):
            if visited[node]:
                return
            
            visited[node]=1
            
            for i in adj[node]:
                DFS(i)
            order.append(node)
            return
        for i in range(len(adj)):
            if not visited[i]:
                DFS(i)
        return order[::-1]
        
    def TransposeGraph(self,adj):
        newAdj=[[] for i in range(len(adj))]
        for i in range(len(adj)):
            for j in range(len(adj[i])):
                newAdj[adj[i][j]].append(i)
        return newAdj